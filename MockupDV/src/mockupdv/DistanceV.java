package mockupdv;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;

import org.apache.commons.lang3.SerializationUtils;
import org.jfree.graphics2d.svg.SVGGraphics2D;
import org.jfree.graphics2d.svg.SVGUtils;

public class DistanceV extends javax.swing.JFrame {

	// public Visualization vis = null;

	/**
	 * Creates new form DistanceV
	 */
	public DistanceV() {
		initComponents();
	}

	// double red = 1.0;
	// double green = 1.0;
	// double blue = 1.0;

	List<String> allLabelsSelected = new LinkedList<>();
	List<String> allLabelsIgnored = new LinkedList<>();
	static String comboString;
	boolean isDiscrete = true;

	DefaultListModel selectedModel = new DefaultListModel();
	DefaultListModel ignoredModel = new DefaultListModel();

	Visualization ap;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jFileChooser1 = new javax.swing.JFileChooser();
		statisticsFrame = new javax.swing.JFrame();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		pearsonField = new javax.swing.JTextField();
		errorField = new javax.swing.JTextField();
		statisticsUpdate = new javax.swing.JButton();
		colorFrame = new javax.swing.JFrame();
		redField = new javax.swing.JTextField();
		greenField = new javax.swing.JTextField();
		blueField = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		setColor = new javax.swing.JButton();
		labelFrame = new javax.swing.JFrame();
		jScrollPane1 = new javax.swing.JScrollPane();
		labelIgnoreList = new JList(ignoredModel);
		jScrollPane2 = new javax.swing.JScrollPane();
		labelSeenList = new JList(selectedModel);
		ignoreLabel = new javax.swing.JButton();
		addLabel = new javax.swing.JButton();
		colorLabel = new javax.swing.JButton();
		visPanel = new Visualization();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		button2D = new javax.swing.JToggleButton();
		positionBox = new javax.swing.JComboBox<>();
		statistics = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		labelBox1 = new javax.swing.JComboBox<>();
		labelBox2 = new javax.swing.JComboBox<>();
		labelBox3 = new javax.swing.JComboBox<>();
		addLabels = new javax.swing.JButton();
		addXY = new javax.swing.JButton();
		addMatrix = new javax.swing.JButton();
		split = new javax.swing.JCheckBox();
		splitBox = new javax.swing.JComboBox<>();
		labels = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		SVG = new javax.swing.JMenuItem();
		jpg = new javax.swing.JMenuItem();
		Exit = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		freeze = new javax.swing.JCheckBoxMenuItem();
		outline = new javax.swing.JCheckBoxMenuItem();

		jFileChooser1.setMultiSelectionEnabled(true);

		statisticsFrame.setTitle("Statistics");
		statisticsFrame.setBounds(new java.awt.Rectangle(150, 150, 530, 280));

		jLabel3.setText("Pearson:");

		jLabel4.setText("Average Error:");

		pearsonField.setEditable(false);
		pearsonField.setText("jTextField1");

		errorField.setEditable(false);
		errorField.setText("jTextField1");
		errorField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				errorFieldActionPerformed(evt);
			}
		});

		statisticsUpdate.setText("Update Statistics");
		statisticsUpdate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				statisticsUpdateActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout statisticsFrameLayout = new javax.swing.GroupLayout(statisticsFrame.getContentPane());
		statisticsFrame.getContentPane().setLayout(statisticsFrameLayout);
		statisticsFrameLayout
				.setHorizontalGroup(statisticsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(statisticsFrameLayout.createSequentialGroup()
								.addGroup(statisticsFrameLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(statisticsFrameLayout.createSequentialGroup().addGap(48, 48, 48)
												.addGroup(statisticsFrameLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel3,
																javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
										.addGap(18, 18, 18)
										.addGroup(statisticsFrameLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(errorField, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(pearsonField, javax.swing.GroupLayout.PREFERRED_SIZE, 353,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGroup(statisticsFrameLayout.createSequentialGroup().addGap(125, 125, 125)
										.addComponent(statisticsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 285,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(23, Short.MAX_VALUE)));

		statisticsFrameLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { errorField, pearsonField });

		statisticsFrameLayout.setVerticalGroup(statisticsFrameLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(statisticsFrameLayout.createSequentialGroup().addGap(60, 60, 60)
						.addGroup(statisticsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3).addComponent(pearsonField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(28, 28, 28)
						.addGroup(statisticsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel4).addComponent(errorField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
						.addComponent(statisticsUpdate).addGap(51, 51, 51)));

		colorFrame.setMinimumSize(new java.awt.Dimension(184, 210));

		redField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				redFieldActionPerformed(evt);
			}
		});

		jLabel5.setText("R:");

		jLabel6.setText("G:");

		jLabel7.setText("B:");

		setColor.setText("Set Color");
		setColor.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				setColorActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout colorFrameLayout = new javax.swing.GroupLayout(colorFrame.getContentPane());
		colorFrame.getContentPane().setLayout(colorFrameLayout);
		colorFrameLayout
				.setHorizontalGroup(colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(colorFrameLayout.createSequentialGroup().addGap(34, 34, 34)
								.addGroup(colorFrameLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(colorFrameLayout.createSequentialGroup()
												.addGroup(colorFrameLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel7,
																javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(colorFrameLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
												.addComponent(greenField, javax.swing.GroupLayout.PREFERRED_SIZE, 82,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(redField, javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE, 82,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(blueField, javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.PREFERRED_SIZE, 82,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addComponent(setColor)).addGap(49, 49, 49)));
		colorFrameLayout.setVerticalGroup(colorFrameLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(colorFrameLayout.createSequentialGroup().addGap(16, 16, 16)
						.addGroup(colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(redField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel5))
						.addGap(18, 18, 18)
						.addGroup(colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(greenField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel6))
						.addGap(18, 18, 18)
						.addGroup(colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(blueField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel7))
						.addGap(27, 27, 27).addComponent(setColor).addContainerGap(20, Short.MAX_VALUE)));

		labelFrame.setMinimumSize(new java.awt.Dimension(595, 377));

		jScrollPane1.setViewportView(labelIgnoreList);

		jScrollPane2.setViewportView(labelSeenList);

		ignoreLabel.setText("Ignore >>");
		ignoreLabel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ignoreLabelActionPerformed(evt);
			}
		});

		addLabel.setText("<< Add");
		addLabel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addLabelActionPerformed(evt);
			}
		});

		colorLabel.setText("Color");
		colorLabel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				colorLabelActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout labelFrameLayout = new javax.swing.GroupLayout(labelFrame.getContentPane());
		labelFrame.getContentPane().setLayout(labelFrameLayout);
		labelFrameLayout.setHorizontalGroup(labelFrameLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, labelFrameLayout.createSequentialGroup()
						.addGap(9, 9, 9)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(labelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(addLabel, javax.swing.GroupLayout.Alignment.CENTER,
										javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
								.addComponent(ignoreLabel, javax.swing.GroupLayout.Alignment.CENTER,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(colorLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
						.addGap(12, 12, 12)));
		labelFrameLayout
				.setVerticalGroup(
						labelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										labelFrameLayout.createSequentialGroup().addGap(22, 22, 22)
												.addGroup(labelFrameLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(labelFrameLayout.createSequentialGroup()
																.addComponent(addLabel)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(ignoreLabel)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(colorLabel)).addComponent(jScrollPane2)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
								.addGap(14, 14, 14)));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Distance Visualizer");

		visPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());

		javax.swing.GroupLayout visPanelLayout = new javax.swing.GroupLayout(visPanel);
		visPanel.setLayout(visPanelLayout);
		visPanelLayout.setHorizontalGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE));
		visPanelLayout.setVerticalGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(visPanelLayout.createSequentialGroup()
						.addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(408, Short.MAX_VALUE)));

		button2D.setText("2D");
		button2D.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				button2DActionPerformed(evt);
			}
		});

		positionBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				positionBoxActionPerformed(evt);
			}
		});

		statistics.setText("Statistics");
		statistics.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				statisticsActionPerformed(evt);
			}
		});

		jLabel2.setText("Labels:");

		labelBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
		labelBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				labelBox1ActionPerformed(evt);
			}
		});

		labelBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
		labelBox2.setEnabled(false);
		labelBox2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				labelBox2ActionPerformed(evt);
			}
		});

		labelBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
		labelBox3.setEnabled(false);
		labelBox3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				labelBox3ActionPerformed(evt);
			}
		});

		addLabels.setText("Add Labels");
		addLabels.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addLabelsActionPerformed(evt);
			}
		});

		addXY.setText("Add X/Y");
		addXY.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addXYActionPerformed(evt);
			}
		});

		addMatrix.setText("Add Distance Matrix");
		addMatrix.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addMatrixActionPerformed(evt);
			}
		});

		split.setText("Split");
		split.setToolTipText("Separate the visualization, can only separate if there are only two labels.");
		split.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				splitActionPerformed(evt);
			}
		});

		splitBox.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		splitBox.setToolTipText("Separate the visualization, can only separate if there are only two labels.");
		splitBox.setEnabled(false);

		labels.setText("Add/Ignore");
		labels.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				labelsActionPerformed(evt);
			}
		});

		jLabel1.setText("Position Controller:");

		jMenu1.setText("File");

		SVG.setText("Save as SVG");
		SVG.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				svgActionPerformed(evt);
			}
		});
		jMenu1.add(SVG);

		jpg.setText("Save as .jpg");
		jpg.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jpgActionPerformed(evt);
			}
		});
		jMenu1.add(jpg);

		Exit.setText("Exit");
		Exit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ExitActionPerformed(evt);
			}
		});
		jMenu1.add(Exit);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");

		freeze.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, 0));
		freeze.setText("Freeze");
		freeze.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				freezeActionPerformed(evt);
			}
		});
		jMenu2.add(freeze);

		outline.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
		outline.setText("Show Outline");
		outline.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				outlineActionPerformed(evt);
			}
		});
		jMenu2.add(outline);

		jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(visPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.addGroup(
						layout.createSequentialGroup().addGap(61, 61, 61)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
										.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 346,
												Short.MAX_VALUE)
								.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup().addComponent(split)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(splitBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(18, 18, 18))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
												.addComponent(statistics).addComponent(labels).addComponent(button2D))
										.addGap(49, 49, 49))))
				.addGroup(javax.swing.GroupLayout.Alignment.CENTER,
						layout.createSequentialGroup().addGap(55, 55, 55)
								.addComponent(labelBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGap(217, 217, 217))
				.addGroup(javax.swing.GroupLayout.Alignment.CENTER,
						layout.createSequentialGroup().addGap(55, 55, 55)
								.addComponent(labelBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGap(217, 217, 217))
				.addGroup(javax.swing.GroupLayout.Alignment.CENTER,
						layout.createSequentialGroup().addGap(55, 55, 55)
								.addComponent(labelBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGap(217, 217, 217))
				.addGroup(javax.swing.GroupLayout.Alignment.CENTER,
						layout.createSequentialGroup().addGap(55, 55, 55)
								.addComponent(positionBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGap(217, 217, 217))
				.addGroup(layout.createSequentialGroup().addGap(55, 55, 55)
						.addComponent(addLabels, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(addXY, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(addMatrix, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(47, 47, 47)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addComponent(visPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup().addComponent(button2D)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(statistics)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(labels)
						.addGap(40, 40, 40)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(split).addComponent(splitBox, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(30, 30, 30))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addComponent(jLabel1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(positionBox, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel2)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(labelBox1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(7, 7, 7)
								.addComponent(labelBox2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(labelBox3, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)))
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addLabels)
						.addComponent(addXY).addComponent(addMatrix)).addGap(18, 18, 18)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	boolean firstTime = true;

	private void button2DActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_button2DActionPerformed
		String name = (String) positionBox.getSelectedItem();
		// Default zPos is set to -12.0 for some reason (Changed to 0.0 since it
		// makes more sense)... See xyzChooser.java
		double defaultZPosition = 0;
		if (firstTime) {
			// User activated 2D mode for first time. Insert code processing
			// that event as usual here.
			xyzPos toFlatten = Visualization.xyzPosList.get(Visualization.positionController.get(name));
			toFlatten = SerializationUtils.clone(toFlatten);
			for (int i = 0; i < toFlatten.z.length; i++) {
				toFlatten.z[i] = defaultZPosition;
			}
			Visualization.xyzPosList.add(toFlatten);
			Visualization.positionController.put(name + "2D", Visualization.xyzPosList.size() - 1);
			Visualization.selectedPositionName = name + "2D";
			resetCamera();
			firstTime = false;
		}
		button2D.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent ev) {
				String name = (String) positionBox.getSelectedItem();
				if (ev.getStateChange() == ItemEvent.SELECTED) {
					if (Visualization.positionController.containsKey(name + "2D")) {
						Visualization.selectedPositionName = name + "2D";
					} else {
						xyzPos toFlatten = Visualization.xyzPosList.get(Visualization.positionController.get(name));
						toFlatten = SerializationUtils.clone(toFlatten);
						for (int i = 0; i < toFlatten.z.length; i++) {
							toFlatten.z[i] = defaultZPosition;
						}
						Visualization.xyzPosList.add(toFlatten);
						Visualization.positionController.put(name + "2D", Visualization.xyzPosList.size() - 1);
						Visualization.selectedPositionName = name + "2D";
					}
				} else if (ev.getStateChange() == ItemEvent.DESELECTED) {
					Visualization.selectedPositionName = name;
				}
				resetCamera();
			}
		});
	}// GEN-LAST:event_button2DActionPerformed

	private void addXYActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addXYActionPerformed
		jFileChooser1.showOpenDialog(this);
		File xyzPosition = jFileChooser1.getSelectedFile();
		positionBox.addItem(xyzPosition.getName());
		try {
			xyzChooser position = new xyzChooser(xyzPosition);
			((Visualization) visPanel).addXyz(position);
			((Visualization) visPanel).repaint();

			String s = xyzPosition.getName();
			button2D.setSelected(false);
			Visualization.selectedPositionName = s;
			Visualization.positionController.put(s, Visualization.positionController.size());
			positionBox.setSelectedItem(s);
			resetCamera();
			// System.out.println(DistanceChooser.xpos.get(0));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_addXYActionPerformed

	private void statisticsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_statisticsActionPerformed
		statisticsFrame.setVisible(true);
	}// GEN-LAST:event_statisticsActionPerformed

	private void freezeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_freezeActionPerformed
		// TODO add your handling code here:
		// Freeze Camera
		// asdf
	}// GEN-LAST:event_freezeActionPerformed

	private void outlineActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_freezeActionPerformed
		Visualization.outlineEnabled = !Visualization.outlineEnabled;
	}// GEN-LAST:event_freezeActionPerformed

	private void ExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ExitActionPerformed
		System.exit(0);
	}// GEN-LAST:event_ExitActionPerformed

	private String getSaveLocation(String type) {
		JFileChooser c = new JFileChooser();
		type = "." + type;
		int rVal = c.showSaveDialog(this);
		if (rVal == JFileChooser.APPROVE_OPTION) {
			String saveLocation = c.getCurrentDirectory().toString() + "\\" + c.getSelectedFile().getName();

			// Makes sure user typed in ".svg" || ".jpg" as file extension
			if (!saveLocation.substring(saveLocation.length() - type.length(), saveLocation.length()).equals(type)) {
				saveLocation += type;
			}

			return saveLocation;
		}
		return "";
	}

	private void svgActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jpgActionPerformed
		SVGGraphics2D g2 = new SVGGraphics2D((int) visPanel.getSize().getWidth(), (int) visPanel.getSize().getHeight());
		visPanel.paint(g2);
		try {
			String saveLocation = getSaveLocation("svg");
			SVGUtils.writeToSVG(new File(saveLocation), g2.getSVGElement());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}// GEN-LAST:event_jpgActionPerformed

	private void jpgActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jpgActionPerformed
		BufferedImage bufImage = new BufferedImage(visPanel.getSize().width, visPanel.getSize().height,
				BufferedImage.TYPE_INT_RGB);
		visPanel.paint(bufImage.createGraphics());
		try {
			String saveLocation = getSaveLocation("jpg");
			ImageIO.write(bufImage, "jpg", new File(saveLocation));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_jpgActionPerformed

	private void addLabelsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addLabelsActionPerformed
		jFileChooser1.showOpenDialog(this);
		File labels = jFileChooser1.getSelectedFile();

		String[] labelTitle = labels.getName().split("-");
		try {
			Labeling labelPos = new Labeling(labels);
			// ((Visualization)visPanel).addColor(labelPos);
			Visualization.labels = labelPos;
			if (!labelPos.isContinuous) {
				for (int i = 0; i < labelPos.discrete.size(); i++) {
					selectedModel.addElement(labelPos.discrete.get(i));
				}
				String toAddItem = "(D) " + labelTitle[labelTitle.length - 1];
				labelBox1.addItem(toAddItem);
				// labelBox2.addItem(toAddItem);
				// labelBox3.addItem(toAddItem);
				Visualization.allTheLabels.put(toAddItem, labelPos);
			} else {
				String toAddItem = "(C) " + labelTitle[labelTitle.length - 1];
				labelBox1.addItem(toAddItem);
				labelBox2.addItem(toAddItem);
				labelBox3.addItem(toAddItem);
				Visualization.allTheLabels.put(toAddItem, labelPos);
				Visualization.allTheLabels.put(toAddItem, labelPos);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}// GEN-LAST:event_addLabelsActionPerformed

	private void addMatrixActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addMatrixActionPerformed
		jFileChooser1.showOpenDialog(this);
		File matrixPos = jFileChooser1.getSelectedFile();
		try {
			matrixChooser position = new matrixChooser(matrixPos);
			// System.out.println(matrixChooser.matrixD.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_addMatrixActionPerformed

	private void statisticsUpdateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_statisticsUpdateActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_statisticsUpdateActionPerformed

	private void labelBox1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_labelBox1ActionPerformed
		comboString = labelBox1.getSelectedItem().toString();
		if (comboString.contains("(D)")) {
			labelBox2.setEnabled(false);
			labelBox2.setSelectedIndex(-1);
			labelBox3.setEnabled(false);
			labelBox3.setSelectedIndex(-1);
			isDiscrete = true;
			split.setEnabled(true);
			Visualization.labels = Visualization.allTheLabels.get(comboString);
		} else if (comboString.contains("(C)")) {
			labelBox2.setEnabled(true);
			labelBox3.setEnabled(true);
			isDiscrete = false;
			split.setEnabled(false);
			try {
				Visualization.labels = Visualization.allTheLabels.get(comboString);
				Visualization.continuousLabelsToShow[0] = comboString;
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (comboString.equals(labelBox2.getSelectedItem().toString())) {
				labelBox2.setSelectedIndex(0);
				Visualization.continuousLabelsToShow[1] = "";
			}
			if (comboString.equals(labelBox3.getSelectedItem().toString())) {
				labelBox3.setSelectedIndex(0);
				Visualization.continuousLabelsToShow[2] = "";
			}
		} else if (("-").equals(comboString)) {
			Visualization.continuousLabelsToShow[0] = "";
		}
		visPanel.repaint();
	}// GEN-LAST:event_labelBox1ActionPerformed

	private void labelBox2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_labelBox1ActionPerformed
		try {
			if (("-").equals(labelBox2.getSelectedItem().toString())) {
				// remove this entry.
				Visualization.continuousLabelsToShow[1] = "";
			} else {
				try {
					comboString = labelBox2.getSelectedItem().toString();
					Visualization.continuousLabelsToShow[1] = comboString;
					labelBox3.setEnabled(true);

					if (comboString.equals(labelBox1.getSelectedItem().toString())) {
						labelBox1.setSelectedIndex(0);
						Visualization.continuousLabelsToShow[0] = "";
					}
					if (comboString.equals(labelBox3.getSelectedItem().toString())) {
						labelBox3.setSelectedIndex(0);
						Visualization.continuousLabelsToShow[2] = "";
					}
				} catch (NullPointerException e) {
					// e.printStackTrace();
				}
			}
		} catch (NullPointerException e) {

		}
		visPanel.repaint();
	}// GEN-LAST:event_labelBox2ActionPerformed

	private void labelBox3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_labelBox1ActionPerformed
		try {
			if (("-").equals(labelBox3.getSelectedItem().toString())) {
				Visualization.continuousLabelsToShow[2] = "";
			} else {
				try {
					comboString = labelBox3.getSelectedItem().toString();
					Visualization.continuousLabelsToShow[2] = comboString;

					if (comboString.equals(labelBox1.getSelectedItem())) {
						labelBox1.setSelectedIndex(0);
						Visualization.continuousLabelsToShow[0] = "";
					}
					if (comboString.equals(labelBox2.getSelectedItem())) {
						labelBox2.setSelectedIndex(0);
						Visualization.continuousLabelsToShow[2] = "";
					}
				} catch (NullPointerException e) {
					// e.printStackTrace();
				}
			}
			visPanel.repaint();
		} catch (NullPointerException e) {

		}
	}// GEN-LAST:event_labelBox3ActionPerformed

	private void errorFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_errorFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_errorFieldActionPerformed

	private void splitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_splitActionPerformed
		if (split.isSelected()) {
			splitBox.setEnabled(true);
		}
		if (!split.isSelected()) {
			splitBox.setEnabled(false);
		}

	}// GEN-LAST:event_splitActionPerformed

	private void labelsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_labelsActionPerformed
		// TODO add your handling code here:
		labelFrame.setVisible(true);
	}// GEN-LAST:event_labelsActionPerformed

	private void colorLabelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_colorLabelActionPerformed
		colorFrame.setVisible(true);
		HashMap<String, double[]> colorCodes = Visualization.colorCodes;

		String selection = labelSeenList.getSelectedValue();
		if (selection == null) {
			selection = labelIgnoreList.getSelectedValue();
		}

		double[] colors = colorCodes.get(selection);
		redField.setText(Math.round(colors[0] * 255 - (1 / 3)) + "");
		greenField.setText(Math.round(colors[1] * 255 - (1 / 3)) + "");
		blueField.setText(Math.round(colors[2] * 255 - (1 / 3)) + "");
	}// GEN-LAST:event_colorLabelActionPerformed

	private void redFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_redFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_redFieldActionPerformed

	private void setColorActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_setColorActionPerformed
		// List<String> selectedLabel = labelSeenList.getSelectedValuesList();
		// for( String s:selectedLabel){
		// changeLabelColor(s);
		// }
		String selection = labelSeenList.getSelectedValue();
		if (selection == null) {
			selection = labelIgnoreList.getSelectedValue();
		}

		// Gets RGB vals from User and makes sure they aren't out of bounds
		String rText = redField.getText();
		double r = Double.parseDouble(rText);
		if (r > 256)
			r = 255;
		else if (r < -1)
			r = 0;

		String gText = greenField.getText();
		double g = Double.parseDouble(gText);
		if (g > 256)
			g = 255;
		else if (g < -1)
			g = 0;

		String bText = blueField.getText();
		double b = Double.parseDouble(bText);
		if (b > 256)
			b = 255;
		else if (b < -1)
			b = 0;

		double convert = 0.0039215485; // y = mx + b (convert is 'm'). glColor3d
										// takes double input from 0.0 - 1.0.
		Visualization.colorCodes.replace(selection, new double[] { r * convert, g * convert, b * convert });

		colorFrame.dispatchEvent(new WindowEvent(colorFrame, WindowEvent.WINDOW_CLOSING));
	}// GEN-LAST:event_setColorActionPerformed

	private void positionBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_positionBoxActionPerformed
		button2D.setSelected(false);
		String s = (String) positionBox.getSelectedItem();
		Visualization.selectedPositionName = s;
		resetCamera();
	}// GEN-LAST:event_positionBoxActionPerformed

	private void ignoreLabelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ignoreLabelActionPerformed
		String selected = (String) labelSeenList.getSelectedValue(); // button
																		// to
																		// ignore
																		// labels
		if (selected != null) {
			ignoreLabel(selected);
		}
	}// GEN-LAST:event_ignoreLabelActionPerformed

	private void addLabelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addLabelActionPerformed
		String selected = (String) labelIgnoreList.getSelectedValue(); // button
																		// to
																		// add
																		// labels
		if (selected != null) {
			addLabel(selected);
		}
	}// GEN-LAST:event_addLabelActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DistanceV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DistanceV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DistanceV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DistanceV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DistanceV().setVisible(true);
			}
		});
	}

	public void ignoreLabel(String labelToIgnore) {
		int[] fromindex = labelSeenList.getSelectedIndices();
		List<String> from = labelSeenList.getSelectedValuesList();

		for (int i = 0; i < from.size(); i++) {
			ignoredModel.addElement(from.get(i));
		}
		for (int i = (fromindex.length - 1); i >= 0; i--) {
			selectedModel.remove(fromindex[i]);
		}
		Visualization.toIgnore = (ArrayList<String>) from;
		// allLabelsSelected.remove(labelToIgnore);
		// allLabelsIgnored.add(labelToIgnore);
		//
		// String []allLabelsSelectedArray = new
		// String[allLabelsSelected.size()];
		// for(int i = 0;i<allLabelsSelected.size();i++)
		// allLabelsSelectedArray[i] = allLabelsSelected.get(i);
		// String []allLabelsIgnoredArray = new String[allLabelsIgnored.size()];
		// for(int i = 0;i<allLabelsIgnored.size();i++) allLabelsIgnoredArray[i]
		// = allLabelsIgnored.get(i);
		//
		// labelSeenList.setListData(allLabelsSelectedArray);
		// labelIgnoreList.setListData(allLabelsIgnoredArray);
	}

	public void addLabel(String labelToIgnore) {
		int[] toindex = labelIgnoreList.getSelectedIndices();

		List<String> to = labelIgnoreList.getSelectedValuesList();

		for (int i = 0; i < to.size(); i++) {
			selectedModel.addElement(to.get(i));
		}
		for (int i = (toindex.length - 1); i >= 0; i--) {
			ignoredModel.remove(toindex[i]);
		}

		for (String s : to) {
			Visualization.toIgnore.remove(s);
		}

		// allLabelsSelected.add(labelToIgnore);
		// allLabelsIgnored.remove(labelToIgnore);
		//
		// String []allLabelsSelectedArray = new
		// String[allLabelsSelected.size()];
		// for(int i = 0;i<allLabelsSelected.size();i++)
		// allLabelsSelectedArray[i] = allLabelsSelected.get(i);
		// String []allLabelsIgnoredArray = new String[allLabelsIgnored.size()];
		// for(int i = 0;i<allLabelsIgnored.size();i++) allLabelsIgnoredArray[i]
		// = allLabelsIgnored.get(i);
		//
		// labelSeenList.setListData(allLabelsSelectedArray);
		// labelIgnoreList.setListData(allLabelsIgnoredArray);
		//
	}

	public void resetCamera() {
		Visualization.scale = 1;
		Visualization.angle = 0;
		Visualization.shiftX = 0;
		Visualization.shiftY = 0;
		Visualization.shiftZ = 0;
	}
	// public void changeLabelColor(String label){
	//
	// for(String s:discrete){
	// double red = Double.parseDouble(redField.getText())/256;
	// double green = Double.parseDouble(greenField.getText())/256;
	// double blue = Double.parseDouble(blueField.getText())/256;
	//
	// Colors visC = new Colors(red, green, blue);
	//
	// }
	// }

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem Exit;
	private javax.swing.JMenuItem SVG;
	private javax.swing.JButton addLabel;
	private javax.swing.JButton addLabels;
	private javax.swing.JButton addMatrix;
	private javax.swing.JButton addXY;
	private javax.swing.JTextField blueField;
	private javax.swing.JToggleButton button2D;
	private javax.swing.JFrame colorFrame;
	private javax.swing.JButton colorLabel;
	private javax.swing.JTextField errorField;
	private javax.swing.JCheckBoxMenuItem freeze;
	private javax.swing.JTextField greenField;
	private javax.swing.JButton ignoreLabel;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JMenuItem jpg;
	private javax.swing.JComboBox<String> labelBox1;
	private javax.swing.JComboBox<String> labelBox2;
	private javax.swing.JComboBox<String> labelBox3;
	private javax.swing.JFrame labelFrame;
	private javax.swing.JList<String> labelIgnoreList;
	private javax.swing.JList<String> labelSeenList;
	private javax.swing.JButton labels;
	private javax.swing.JCheckBoxMenuItem outline;
	private javax.swing.JTextField pearsonField;
	private javax.swing.JComboBox<String> positionBox;
	private javax.swing.JTextField redField;
	private javax.swing.JButton setColor;
	private javax.swing.JCheckBox split;
	private javax.swing.JComboBox<String> splitBox;
	private javax.swing.JButton statistics;
	private javax.swing.JFrame statisticsFrame;
	private javax.swing.JButton statisticsUpdate;
	private javax.swing.JPanel visPanel;
	// End of variables declaration//GEN-END:variables
}
